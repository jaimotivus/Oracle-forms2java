# ===============================
# = APPLICATION CONFIGURATION
# ===============================
spring.application.name=SINF50104-AdjustmentReservesSystem
server.port=8080
server.servlet.context-path=/api # Ensure this matches your routing configuration in controllers

# ===============================
# = DATA SOURCE
# ===============================
# Database connection details.  For production, these should be externalized via environment variables or a secrets management system.
# Example: spring.datasource.password=${DB_PASSWORD}
spring.datasource.url=jdbc:oracle:thin:@localhost:1521:ORCL
spring.datasource.username=gioseg
spring.datasource.password=password
spring.datasource.driver-class-name=oracle.jdbc.OracleDriver

# Hikari connection pool configuration.  Tune these for optimal performance in your environment.
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.idle-timeout=30000 # Milliseconds
spring.datasource.hikari.connection-timeout=30000 # Milliseconds
spring.datasource.hikari.max-lifetime=1800000 # 30 minutes (1800000 milliseconds).  Connections older than this will be closed.
spring.datasource.hikari.leak-detection-threshold=60000 # Milliseconds.  Log a warning if a connection is held longer than this.  Useful for debugging connection leaks.

# ===============================
# = JPA / HIBERNATE
# ===============================
spring.jpa.show-sql=false # Disable in production to avoid excessive logging.  Use logging.level.org.hibernate.SQL=DEBUG for debugging.
spring.jpa.hibernate.ddl-auto=none # Set to 'update' for development, but NEVER in production.  Use Flyway or Liquibase for schema migrations.
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.Oracle12cDialect # Ensure this matches your Oracle version.
spring.jpa.properties.hibernate.format_sql=true # Format SQL in logs for readability (development only).
spring.jpa.open-in-view=false # Recommended for performance reasons.  Handle transactions explicitly in your service layer.

# Enable second-level cache (if needed)
# spring.jpa.properties.hibernate.cache.use_second_level_cache=true
# spring.jpa.properties.hibernate.cache.region.factory_class=org.hibernate.cache.jcache.ConfigSettings.PROVIDER

# ===============================
# = LOGGING
# ===============================
logging.level.org.springframework=INFO
logging.level.com.yourcompany.project=DEBUG # Replace com.yourcompany.project with your actual package name.
logging.level.org.hibernate.SQL=DEBUG # Only enable for debugging SQL queries.
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE # Only enable for detailed parameter binding information (very verbose).

# Log file configuration (optional)
# logging.file.name=application.log
# logging.file.path=/var/log/myapp

# ===============================
# = SECURITY
# ===============================
# In-memory authentication (for development/testing only).  NEVER use this in production.
# For production, use JWT, OAuth 2.0, or another robust authentication mechanism.
spring.security.user.name=admin
spring.security.user.password=admin

# JWT Configuration (example - replace with your actual implementation)
jwt.secret=${JWT_SECRET:reserveAdjustmentSecretKey} # Externalize this secret!  Use an environment variable or secrets management.  Provide a default for local development.
jwt.expiration=86400000 # Token expiration time in milliseconds (24 hours).

# Enable CSRF protection (recommended for web applications)
# spring.security.csrf.enabled=true

# ===============================
# = INSURANCE SPECIFIC SETTINGS
# ===============================
# These settings are specific to the insurance business logic.
# Consult the insurance business analysts for details on these parameters.
# These values are consumed by the InsuranceService class.

# Default values for insurance parameters
insurance.default-branch=5
insurance.default-line=13
insurance.default-claim=130001125
insurance.default-accounting-line=10

# LUC validation parameters
insurance.luc.validation-enabled=true
insurance.luc.max-adjustment-percentage=150

# Accounting settings
insurance.accounting.entry-type=RA
insurance.accounting.account-prefix=SINT

# Reserve adjustment settings
insurance.reserve.allow-negative-adjustments=false
insurance.reserve.validate-sum-insured=true
insurance.reserve.priority-based-adjustment=true

# ===============================
# = BATCH PROCESSING
# ===============================
spring.batch.job.enabled=false # Disable batch jobs by default.  Enable them via profiles or command-line arguments when needed.
spring.batch.initialize-schema=always # Initialize the batch schema on startup.  Consider using Flyway/Liquibase for schema management in production.

# ===============================
# = ACTUATOR
# ===============================
management.endpoints.web.exposure.include=health,info,metrics # Expose health, info, and metrics endpoints.
management.endpoint.health.show-details=always # Show full health details.  Consider using 'when-authorized' in production.

# Secure actuator endpoints (example - configure roles as needed)
# management.endpoints.web.security.enabled=true
# management.endpoints.web.security.roles=ACTUATOR_ADMIN

# ===============================
# = INTERNATIONALIZATION
# ===============================
spring.messages.basename=i18n/messages # Base name of the message resource bundles.
spring.messages.encoding=UTF-8 # Encoding of the message resource bundles.
spring.messages.fallback-to-system-locale=false # Whether to fall back to the system locale if a message is not found in the specified locale.

# ===============================
# = ERROR HANDLING
# ===============================
server.error.include-message=always # Include the error message in the response.  Consider using 'trace' or 'never' in production to avoid exposing sensitive information.
server.error.include-binding-errors=always # Include binding errors in the response.  Useful for debugging validation errors.
server.error.include-stacktrace=never # Never include the stack trace in the response in production.  Use logging for debugging.
server.error.include-exception=false # Do not include the exception class name in the response.

# ===============================
# = CUSTOM FORM MESSAGES
# ===============================
# These messages are used in the UI and should be internationalized properly.
# Ensure that these keys exist in the i18n/messages.properties file (and any locale-specific versions).

# Error messages
message.error.reserve-exceeds-insured-sum=La Reserva que trata de crear para este siniestro excede la Suma Asegurada para esta cobertura
message.error.negative-adjustment=No es permitido ingresar montos negativos en el ajuste
message.error.zero-adjustment=El Monto a ajustar es igual a cero, ¿desea continuar?
message.error.adjustment-equals-balance=Monto de Ajuste debe ser diferente al saldo
message.error.coverage-not-valid=La Cobertura no está Vigente o No Existe para la Póliza/Certificado
message.error.sum-insured-zero=Advertencia: Monto de suma asegurada es igual a cero
message.error.adjustment-exceeds-sum-insured=El monto de la reserva no debe ser mayor a la suma asegurada de la poliza menos los pagos
message.error.validate-adjustments=Se debe validar los Ajustes, previamente
message.error.no-adjustments=No existen ajustes de reservar por aplicar

# Success messages
message.success.adjustment-saved=Se realizo el movimiento de {0} correctamente

# ===============================
# = FILE UPLOAD
# ===============================
spring.servlet.multipart.max-file-size=10MB # Maximum file size for uploads.
spring.servlet.multipart.max-request-size=10MB # Maximum request size for uploads (including multiple files).

# ===============================
# = PROFILES (Example)
# ===============================
# To use profiles, create separate files like application-dev.properties, application-prod.properties, etc.
# and activate them using the spring.profiles.active property (e.g., spring.profiles.active=prod).

# Example: application-dev.properties
# spring.jpa.show-sql=true
# spring.jpa.hibernate.ddl-auto=update

# Example: application-prod.properties
# spring.jpa.show-sql=false
# spring.jpa.hibernate.ddl-auto=none
# jwt.secret=${JWT_SECRET} # Only define the JWT secret in production.

# ===============================
# = CORS CONFIGURATION (Example)
# ===============================
# Configure Cross-Origin Resource Sharing (CORS) to allow requests from your Angular frontend.
# spring.web.cors.allowed-origins=http://localhost:4200,https://your-production-domain.com
# spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
# spring.web.cors.allowed-headers=*
# spring.web.cors.allow-credentials=true